import { StickyHeader } from "./StickyHeader"
import { ContentZone } from "./ContentZone"
import Head from 'next/head'
import Image from 'next/image'
import { useState, createContext, useRef, useEffect } from "react"
import { MobileNav } from "./MobileNav"
import Script from "next/script"
import { MobileUserPanel } from "./MobileUserPanel"
import { faAngleUp } from "@fortawesome/free-solid-svg-icons"
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome"

const MyChattanoogaContext = createContext();

export const MyChattanoogaProvider = ({ children }) => {

    const [menuExpanded, setMenuExpanded] = useState(false);
    const [panelExpanded, setPanelExpanded] = useState(false);
    const [isDark, setDark] = useState(false);
    const [weatherData, setWeatherData] = useState(null);
    const [defaultWeatherLocation, setDefaultWeatherLocation] = useState(null);
    const [settingsPannelExpanded, setSettingsPanelExpanded] = useState(false);

    function toggleMobileNav() {
        setMenuExpanded(menuExpanded => !menuExpanded)
    }
    function toggleMobileUserPanel() {
        setPanelExpanded(panelExpanded => !panelExpanded)
    }
    function toggleDarkMode() {
        setDark(isDark => !isDark);
        document.body.classList.contains('dark') 
            ? document.body.classList.remove("dark") 
            : document.body.classList.add("dark");
    }

    const value = {
        isExpanded: {menuExpanded},
        toggleMobileNav: {toggleMobileNav},
        panelExpanded: {panelExpanded},
        toggleMobileUserPanel: {toggleMobileUserPanel},
        toggleDarkMode: {toggleDarkMode},
        settingsPannelExpanded: {settingsPannelExpanded},
        setSettingsPanelExpanded: {setSettingsPanelExpanded}
    }

    const childrenComponentClassString = menuExpanded === true 
        ? "overscroll-contain scroll-smooth p-6 lg:px-8 lg:pt-8 bg-[#FFF] dark:bg-[#222] transition duration-[250ms] blur-sm ease-in-out"
        : "overscroll-contain scroll-smooth p-6 lg:px-8 lg:pt-8 bg-[#FFF] dark:bg-[#222]"

    return (
        <MyChattanoogaContext.Provider value={value}>
            <div className="flex flex-col h-screen overscroll-contain">
                <Head>
                        <title>myChattanooga</title>
                        <meta name="description" content="Generated by create next app" key="siteDescription"/>
                        <link rel="icon" href="/favicon.ico" /> 
                </Head>

                <header className="relative w-screen shadow-sm bg-[#FFF] dark:bg-[#222]">
                    <StickyHeader isDark={isDark} />
                </header>

                <main className="w-screen h-screen align-center relative overflow-y-scroll" key="siteContent">
                    <div className="sm:hidden fixed w-full h-fit object-center -left-full z-50 flex mx-auto" key="MobileNav">
                        <MobileNav isDark={isDark} menuExpanded={menuExpanded} setMenuExpanded={setMenuExpanded}/>
                    </div>
                    <div className="sm:hidden fixed w-full h-fit object-center -bottom-16 z-50 mx-auto" key="MobileUserPanel">
                        <MobileUserPanel 
                            isDark={isDark} 
                            panelExpanded={panelExpanded} 
                            toggleDarkMode={toggleDarkMode}
                        />
                    </div>
                    <div className={childrenComponentClassString} key="siteContent">
                        {children}
                    </div>
                </main>

                {/* <footer className="flex items-center w-screen">
                    
                    <div className="flex-auto">
                        Hi
                    </div>
                        
                </footer> */}
            </div>
        </MyChattanoogaContext.Provider>
    )
}

export default MyChattanoogaContext
