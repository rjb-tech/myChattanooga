import { StickyHeader } from "./StickyHeader"
import { ContentZone } from "./ContentZone"
import Head from 'next/head'
import Image from 'next/image'
import { useState, createContext, useRef, useEffect, cloneElement } from "react"
import { MobileNav } from "./MobileNav"
import Script from "next/script"
import { MobileUserPanel } from "./MobileUserPanel"
import { faAngleUp } from "@fortawesome/free-solid-svg-icons"
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome"
import { motion } from "framer-motion"

const MyChattanoogaContext = createContext();

const childrenComponentVariants = {
    normal: {y: "0%"},
    extended: {y: "5rem"}
}

const userPanelVariants = {
    open: { opacity: 1, y: "0%" },
    closed: { opacity: 0, y: "-100%" },
}

export const MyChattanoogaProvider = ({ children }) => {

    const [ menuExpanded, setMenuExpanded ] = useState(false);
    const [ panelExpanded, setPanelExpanded ] = useState(false);
    const [ isDark, setDark ] = useState(false);
    const [ weatherData, setWeatherData ] = useState(null);
    const [ defaultWeatherLocation, setDefaultWeatherLocation ] = useState(null);
    const [ settingsPanelExpanded, setSettingsPanelExpanded ] = useState(false);
    const [ auxPanelExpanded, setAuxPanelExpanded ] = useState(false);
    const [ filtersApplied, setFiltersApplied ] = useState([]);

    function toggleMobileNav() {
        setMenuExpanded(menuExpanded => !menuExpanded);
    }
    function toggleMobileUserPanel() {
        if (auxPanelExpanded===true) {
            setAuxPanelExpanded(auxPanelExpanded => !auxPanelExpanded);
            setTimeout(function(){
                setPanelExpanded(panelExpanded => !panelExpanded)         
            }, 150);
        }
        else{
            setPanelExpanded(panelExpanded => !panelExpanded);
        }
    }
    function toggleDarkMode() {
        setDark(isDark => !isDark);
        document.body.classList.contains('dark') 
            ? document.body.classList.remove("dark") 
            : document.body.classList.add("dark");
    }

    const value = {
        isExpanded: {menuExpanded},
        toggleMobileNav: {toggleMobileNav},
        panelExpanded: {panelExpanded},
        toggleMobileUserPanel: {toggleMobileUserPanel},
        toggleDarkMode: {toggleDarkMode},
        settingsPanelExpanded: {settingsPanelExpanded},
        setSettingsPanelExpanded: {setSettingsPanelExpanded},
        auxPanelExpanded: {auxPanelExpanded},
        setAuxPanelExpanded: {setAuxPanelExpanded},
        filtersApplied: {filtersApplied},
        setFiltersApplied: {setFiltersApplied}
    }

    const childrenWrapperClassString = (menuExpanded === true) 
        ? "overscroll-contain transition duration-[300ms] blur-sm ease-linear"
        : "overscroll-contain transition duration-[300ms]"

    return (
        <MyChattanoogaContext.Provider value={value}>
            <div className="flex flex-col h-screen overscroll-contain bg-[#FFF] dark:bg-[#222]">
                <Head>
                        <title>myChattanooga</title>
                        <meta name="description" content="Generated by create next app" key="siteDescription"/>
                        <link rel="icon" href="/favicon.ico" /> 
                </Head>

                <header className="w-screen border-b-2 shadow-sm bg-[#FFF] dark:bg-[#222] z-50">
                    <StickyHeader isDark={isDark} />
                </header>

                <main className="w-screen h-screen align-center relative overflow-y-scroll" key="siteContent">
                    {/* TECH DEBT: Put motion element here instead of in MobileNav component */}
                    <div className="sm:hidden fixed w-full h-fit object-center -left-full z-50 flex mx-auto" key="MobileNav">
                        <MobileNav 
                            isDark={isDark} 
                            menuExpanded={menuExpanded} 
                            setMenuExpanded={setMenuExpanded}
                            toggleMobileUserPanel={toggleMobileUserPanel}
                            panelExpanded={panelExpanded}
                        />
                    </div>
                    {/* There's some weird jitter going on weirdly */}
                    <motion.div 
                        className="sm:hidden w-full h-fit object-center fixed z-40 mx-auto" 
                        key="MobileUserPanel"
                        animate={panelExpanded===true ? 'open' : 'closed'}
                        transition={{ 
                            duration: panelExpanded===true ? .3 : .3, 
                            type: "tween"
                        }}
                        variants={userPanelVariants}
                    >
                        <MobileUserPanel 
                            isDark={isDark} 
                            panelExpanded={panelExpanded} 
                            toggleDarkMode={toggleDarkMode}
                            setAuxPanelExpanded={setAuxPanelExpanded}
                            auxPanelExpanded={auxPanelExpanded}
                        />
                    </motion.div>
                    <div className={childrenWrapperClassString}>
                        <motion.div 
                            animate={panelExpanded===true ? 'extended' : 'normal'}
                            className="scroll-smooth p-2 py-4 lg:px-8 lg:pt-8"
                            transition={{ 
                                duration: panelExpanded===true ? .3 : .5,
                                type: "tween"
                            }}
                            variants={childrenComponentVariants}
                        >
                            {cloneElement(children, {filtersApplied: filtersApplied, 
                                                     setFiltersApplied: setFiltersApplied,
                                                     toggleMobileUserPanel: toggleMobileUserPanel
                                                    })}
                            {/* {children} */}
                        </motion.div>
                    </div>
                </main>

                {/* <footer className="flex items-center w-screen">
                    
                    <div className="flex-auto">
                        Hi
                    </div>
                        
                </footer> */}
            </div>
        </MyChattanoogaContext.Provider>
    )
}

export default MyChattanoogaContext
